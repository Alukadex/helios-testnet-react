"use client";

import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { 
  Plus, 
  Users, 
  Activity, 
  Calendar, 
  Edit3, 
  Power, 
  PowerOff, 
  Trash2,
  RefreshCw,
  Eye,
  Copy,
  Check,
  X,
  BarChart3,
  Shield,
  AlertTriangle,
  Clock,
  Trophy,
  TrendingUp,
  Star,
  Zap,
  Gift,
  Target,
  PieChart,
  LineChart,
  Home,
  Settings,
  UserCheck
} from "lucide-react";
import { useAccount } from "wagmi";
import { api, TemporaryInviteCode, CreateTemporaryCodeRequest } from "../../services/api";
import Footer from "../../components/Footer";

// Admin wallet addresses (replace these with actual admin wallets)
const ADMIN_WALLETS = [
  // Add your admin wallet addresses here in lowercase
  "0x8984e422E30033A84B780420566046d25EB3519a".toLowerCase(), // Fred wallet
  "0x007a1123a54cdD9bA35AD2012DB086b9d8350A5f".toLowerCase(), // testnet wallet 
  "0xcfc9b7c86c97b0b5b6a5f897f102408ba3ca07d8".toLowerCase(), // chris wallet
  "0x688feDf2cc9957eeD5A56905b1A0D74a3bAc0000".toLowerCase(), // jiji wallet
  "0xc1DC703e60DFcAF560eA5E3C8Ab1CaeD738CA138".toLowerCase(), // yami wallet
  "0x34d91c8cd5bb040a046363c691b17375a10c4eca".toLowerCase(), // chris new wallet
  // Add more admin wallets as needed
];

interface TestnetStats {
  totalUsers: number;
  totalReferrals: number;
  totalXP: number;
  activeUsers24h: number;
  totalTemporaryCodes: number;
  activeTemporaryCodes: number;
  totalTemporaryCodeUsage: number;
}

interface ComprehensiveStats {
  // User metrics
  totalUsers: number;
  newUsersToday: number;
  newUsersThisWeek: number;
  activeUsers24h: number;
  activeUsers7d: number;
  
  // XP metrics
  totalXPEarned: number;
  xpEarnedToday: number;
  xpEarnedThisWeek: number;
  avgXPPerUser: number;
  
  // Referral metrics
  totalReferrals: number;
  referralsToday: number;
  referralsThisWeek: number;
  avgReferralsPerUser: number;
  
  // Invite quota metrics
  currentDailyQuota: number;
  quotaUsageToday: number;
  quotaUsageThisWeek: number;
  avgQuotaUtilization: number;
  
  // Temporary codes
  totalTemporaryCodes: number;
  activeTemporaryCodes: number;
  temporaryCodeUsage: number;
  
  // Growth metrics
  userGrowthRate: number;
  xpGrowthRate: number;
  referralGrowthRate: number;
}

interface MarketingStats {
  // Viral Growth Metrics
  viralCoefficient: number; // Average users referred per user
  referralConversionRate: number; // % of referrals that become active users
  timeToFirstReferral: number; // Average hours until first referral
  
  // User Acquisition
  organicUsers: number; // Users without referredBy
  referredUsers: number; // Users with referredBy
  temporaryCodeUsers: number; // Users from temp codes
  acquisitionCostPerUser: number; // Estimated based on campaign spend
  
  // Engagement & Retention
  dailyActiveUsers: number;
  weeklyActiveUsers: number;
  monthlyActiveUsers: number;
  avgSessionsPerUser: number;
  retentionRate7d: number; // % of users active after 7 days
  retentionRate30d: number; // % of users active after 30 days
  churnRate: number; // % of users who became inactive
  
  // Campaign Performance
  topPerformingCodes: Array<{
    code: string;
    name: string;
    conversionRate: number;
    totalUsers: number;
    avgXPPerUser: number;
  }>;
  
  // Network Effects
  networkStrength: number; // Overall connectedness score
  topInfluencers: Array<{
    wallet: string;
    referralCount: number;
    networkSize: number; // Total users in their network tree
    networkXP: number; // Total XP generated by their network
  }>;
  
  // Geographic & Timing
  peakHours: Array<{ hour: number; userCount: number }>;
  userGrowthMomentum: number; // Acceleration/deceleration of growth
  
  // Community Health
  discordLinkedUsers: number;
  socialEngagementScore: number;
  communityGrowthRate: number;
}

interface DailyTrend {
  date: string;
  users: number;
  xp: number;
  referrals: number;
  quotaUsage: number;
}

type AdminView = 'overview' | 'temporary-codes' | 'users' | 'settings';

const AdminDashboard = () => {
  const { address } = useAccount();
  const [currentView, setCurrentView] = useState<AdminView>('overview');
  const [temporaryCodes, setTemporaryCodes] = useState<TemporaryInviteCode[]>([]);
  const [stats, setStats] = useState<TestnetStats | null>(null);
  const [comprehensiveStats, setComprehensiveStats] = useState<ComprehensiveStats | null>(null);
  const [marketingStats, setMarketingStats] = useState<MarketingStats | null>(null);
  const [dailyTrends, setDailyTrends] = useState<DailyTrend[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [copiedCode, setCopiedCode] = useState<string | null>(null);
  const [createFormData, setCreateFormData] = useState<CreateTemporaryCodeRequest>({
    name: "",
    description: "",
    maxUses: 100,
    expiresAt: "",
    customCode: ""
  });

  // Check if user is admin
  const isAdmin = address && ADMIN_WALLETS.includes(address.toLowerCase());

  useEffect(() => {
    if (isAdmin) {
      fetchData();
    }
  }, [isAdmin, currentView]);

  const fetchComprehensiveData = async () => {
    try {
      setLoading(true);
      
      // Fetch comprehensive data using existing API endpoints
      const [quotaStats, referralStats, currentQuota, marketingAnalytics] = await Promise.all([
        api.getQuotaStatistics(30),
        api.getGlobalReferralStats(),
        api.getCurrentInviteQuota(),
        api.getMarketingAnalytics()
      ]);

      // Calculate comprehensive stats
      if (quotaStats.success && referralStats.success) {
        const quotaData = quotaStats.data.statistics;
        const todayStats = quotaData[0] || {};
        const yesterdayStats = quotaData[1] || {};
        const weekStats = quotaData.slice(0, 7);

        const comprehensiveData: ComprehensiveStats = {
          // User metrics
          totalUsers: referralStats.stats.totalUsers,
          newUsersToday: Math.max(0, todayStats.usersActiveToday - (yesterdayStats.usersActiveToday || 0)),
          newUsersThisWeek: weekStats.reduce((sum, day) => sum + (day.usersActiveToday || 0), 0),
          activeUsers24h: todayStats.usersActiveToday || 0,
          activeUsers7d: Math.max(...weekStats.map(day => day.usersActiveToday || 0)),
          
          // XP metrics (estimated based on activity)
          totalXPEarned: referralStats.stats.totalReferralXP,
          xpEarnedToday: Math.round((todayStats.activityToday || 0) * 10), // Estimate XP from activity
          xpEarnedThisWeek: weekStats.reduce((sum, day) => sum + Math.round((day.activityToday || 0) * 10), 0),
          avgXPPerUser: referralStats.stats.totalUsers > 0 ? Math.round(referralStats.stats.totalReferralXP / referralStats.stats.totalUsers) : 0,
          
          // Referral metrics (estimated)
          totalReferrals: referralStats.stats.totalReferrals,
          referralsToday: Math.round(todayStats.usersActiveToday * 0.1), // Estimate
          referralsThisWeek: weekStats.reduce((sum, day) => sum + Math.round((day.usersActiveToday || 0) * 0.1), 0),
          avgReferralsPerUser: referralStats.stats.totalUsers > 0 ? Math.round((referralStats.stats.totalReferrals / referralStats.stats.totalUsers) * 100) / 100 : 0,
          
          // Invite quota metrics
          currentDailyQuota: currentQuota.success ? currentQuota.data.currentQuota : 0,
          quotaUsageToday: Math.round(todayStats.inviteQuota * 0.7), // Estimate usage
          quotaUsageThisWeek: weekStats.reduce((sum, day) => sum + Math.round((day.inviteQuota || 0) * 0.7), 0),
          avgQuotaUtilization: currentQuota.success && currentQuota.data.currentQuota > 0 
            ? Math.round((Math.round(todayStats.inviteQuota * 0.7) / currentQuota.data.currentQuota) * 100) : 0,
          
          // Temporary codes (will be filled separately)
          totalTemporaryCodes: 0,
          activeTemporaryCodes: 0,
          temporaryCodeUsage: 0,
          
          // Growth metrics
          userGrowthRate: yesterdayStats.usersActiveToday > 0 ? 
            Math.round(((todayStats.usersActiveToday || 0) / yesterdayStats.usersActiveToday - 1) * 100) : 0,
          xpGrowthRate: yesterdayStats.activityToday > 0 ? 
            Math.round(((todayStats.activityToday || 0) / yesterdayStats.activityToday - 1) * 100) : 0,
          referralGrowthRate: yesterdayStats.usersActiveToday > 0 ? 
            Math.round(((Math.round(todayStats.usersActiveToday * 0.1) || 0) / Math.round(yesterdayStats.usersActiveToday * 0.1) - 1) * 100) : 0,
        };

        setComprehensiveStats(comprehensiveData);

        // Set daily trends for charts
        const trends: DailyTrend[] = quotaData.slice(0, 14).reverse().map(day => ({
          date: day.date,
          users: day.usersActiveToday || 0,
          xp: Math.round((day.activityToday || 0) * 10),
          referrals: Math.round((day.usersActiveToday || 0) * 0.1),
          quotaUsage: Math.round((day.inviteQuota || 0) * 0.7),
        }));
        setDailyTrends(trends);

        // Set marketing analytics data
        if (marketingAnalytics.success) {
          setMarketingStats(marketingAnalytics.data);
        }
      }
    } catch (err: any) {
      console.error("Error fetching comprehensive data:", err);
      setError(err.message || "Failed to fetch comprehensive data");
    } finally {
      setLoading(false);
    }
  };

  const fetchTemporaryCodesData = async () => {
    try {
      // Fetch temporary codes
      const codesResponse = await api.listTemporaryCodes(1, 50, true);
      if (codesResponse.success) {
        setTemporaryCodes(codesResponse.data.codes);

        // Update comprehensive stats with temporary codes data
        if (comprehensiveStats) {
          setComprehensiveStats({
            ...comprehensiveStats,
            totalTemporaryCodes: codesResponse.data.codes.length,
            activeTemporaryCodes: codesResponse.data.codes.filter(code => code.isActive).length,
            temporaryCodeUsage: codesResponse.data.codes.reduce((total, code) => total + code.currentUses, 0)
          });
        }
      }
    } catch (err: any) {
      console.error("Error fetching temporary codes:", err);
    }
  };

  const fetchData = async () => {
    if (currentView === 'overview') {
      await fetchComprehensiveData();
    } else if (currentView === 'temporary-codes') {
      await fetchTemporaryCodesData();
    }
  };

  const handleCreateCode = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await api.createTemporaryCode(createFormData);
      if (response.success) {
        setShowCreateForm(false);
        setCreateFormData({
          name: "",
          description: "",
          maxUses: 100,
          expiresAt: "",
          customCode: ""
        });
        fetchData(); // Refresh data
      }
    } catch (err: any) {
      console.error("Error creating code:", err);
      alert(err.message || "Failed to create code");
    }
  };

  const handleDeactivateCode = async (code: string) => {
    try {
      await api.deactivateTemporaryCode(code);
      fetchData(); // Refresh data
    } catch (err: any) {
      console.error("Error deactivating code:", err);
      alert(err.message || "Failed to deactivate code");
    }
  };

  const handleCopyCode = (code: string) => {
    navigator.clipboard.writeText(code);
    setCopiedCode(code);
    setTimeout(() => setCopiedCode(null), 2000);
  };

  const handleCleanupExpired = async () => {
    try {
      const response = await api.cleanupExpiredCodes();
      if (response.success) {
        alert(`Cleaned up ${response.data.deactivatedCount} expired codes`);
        fetchData(); // Refresh data
      }
    } catch (err: any) {
      console.error("Error cleaning up codes:", err);
      alert(err.message || "Failed to cleanup expired codes");
    }
  };

  if (!address) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <Shield className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-600 mb-2">Connect Wallet</h1>
          <p className="text-gray-500 mb-4">Please connect your wallet to access admin panel</p>
          <button
            onClick={() => window.location.href = '/'}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
          >
            Go to Dashboard
          </button>
        </div>
      </div>
    );
  }

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-100 flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="h-16 w-16 text-red-400 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-red-600 mb-2">Access Denied</h1>
          <p className="text-red-500 mb-4">You don't have admin permissions</p>
          <button
            onClick={() => window.location.href = '/'}
            className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors"
          >
            Go to Dashboard
          </button>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 text-blue-600 animate-spin mx-auto mb-4" />
          <p className="text-blue-600">Loading admin data...</p>
        </div>
      </div>
    );
  }

  const renderOverviewContent = () => {
    if (!comprehensiveStats) return null;

    return (
      <>
        {/* Overview Stats Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
        >
          {/* User Metrics */}
          <div className="bg-white rounded-xl p-6 shadow-lg border border-blue-200">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
                <Users className="h-6 w-6 text-blue-600" />
              </div>
              <span className={`text-xs px-2 py-1 rounded-full ${
                comprehensiveStats.userGrowthRate >= 0 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
              }`}>
                {comprehensiveStats.userGrowthRate >= 0 ? '+' : ''}{comprehensiveStats.userGrowthRate}%
              </span>
            </div>
            <h3 className="text-lg font-bold text-blue-900 mb-2">Total Users</h3>
            <p className="text-3xl font-bold text-blue-700">{comprehensiveStats.totalUsers.toLocaleString()}</p>
            <p className="text-sm text-gray-600 mt-2">
              +{comprehensiveStats.newUsersToday} today | {comprehensiveStats.activeUsers24h} active
            </p>
          </div>

          {/* XP Metrics */}
          <div className="bg-white rounded-xl p-6 shadow-lg border border-green-200">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
                <Star className="h-6 w-6 text-green-600" />
              </div>
              <span className={`text-xs px-2 py-1 rounded-full ${
                comprehensiveStats.xpGrowthRate >= 0 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
              }`}>
                {comprehensiveStats.xpGrowthRate >= 0 ? '+' : ''}{comprehensiveStats.xpGrowthRate}%
              </span>
            </div>
            <h3 className="text-lg font-bold text-green-900 mb-2">Total XP</h3>
            <p className="text-3xl font-bold text-green-700">{comprehensiveStats.totalXPEarned.toLocaleString()}</p>
            <p className="text-sm text-gray-600 mt-2">
              +{comprehensiveStats.xpEarnedToday} today | {comprehensiveStats.avgXPPerUser} avg/user
            </p>
          </div>

          {/* Referral Metrics */}
          <div className="bg-white rounded-xl p-6 shadow-lg border border-purple-200">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center">
                <UserCheck className="h-6 w-6 text-purple-600" />
              </div>
              <span className={`text-xs px-2 py-1 rounded-full ${
                comprehensiveStats.referralGrowthRate >= 0 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
              }`}>
                {comprehensiveStats.referralGrowthRate >= 0 ? '+' : ''}{comprehensiveStats.referralGrowthRate}%
              </span>
            </div>
            <h3 className="text-lg font-bold text-purple-900 mb-2">Referrals</h3>
            <p className="text-3xl font-bold text-purple-700">{comprehensiveStats.totalReferrals.toLocaleString()}</p>
            <p className="text-sm text-gray-600 mt-2">
              +{comprehensiveStats.referralsToday} today | {comprehensiveStats.avgReferralsPerUser} avg/user
            </p>
          </div>

          {/* Quota Metrics */}
          <div className="bg-white rounded-xl p-6 shadow-lg border border-orange-200">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center">
                <Target className="h-6 w-6 text-orange-600" />
              </div>
              <span className="text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700">
                {comprehensiveStats.avgQuotaUtilization}%
              </span>
            </div>
            <h3 className="text-lg font-bold text-orange-900 mb-2">Invite Quota</h3>
            <p className="text-3xl font-bold text-orange-700">{comprehensiveStats.currentDailyQuota}</p>
            <p className="text-sm text-gray-600 mt-2">
              {comprehensiveStats.quotaUsageToday} used today | {comprehensiveStats.avgQuotaUtilization}% utilization
            </p>
          </div>
        </motion.div>

        {/* Growth Trends Chart Area */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8"
        >
          {/* Daily Activity Summary */}
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
              <TrendingUp className="h-6 w-6 text-green-600 mr-2" />
              14-Day Trends
            </h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
                <span className="text-sm font-medium text-blue-900">Active Users</span>
                <span className="text-lg font-bold text-blue-700">
                  {dailyTrends.length > 0 ? dailyTrends[dailyTrends.length - 1]?.users || 0 : 0}
                </span>
              </div>
              <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                <span className="text-sm font-medium text-green-900">XP Earned</span>
                <span className="text-lg font-bold text-green-700">
                  {dailyTrends.length > 0 ? dailyTrends[dailyTrends.length - 1]?.xp || 0 : 0}
                </span>
              </div>
              <div className="flex justify-between items-center p-3 bg-purple-50 rounded-lg">
                <span className="text-sm font-medium text-purple-900">Referrals</span>
                <span className="text-lg font-bold text-purple-700">
                  {dailyTrends.length > 0 ? dailyTrends[dailyTrends.length - 1]?.referrals || 0 : 0}
                </span>
              </div>
            </div>
          </div>

          {/* System Health */}
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
              <Activity className="h-6 w-6 text-green-600 mr-2" />
              System Health
            </h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Invite System</span>
                <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">Active</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Temporary Codes</span>
                <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                  {comprehensiveStats.activeTemporaryCodes} Active
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Growth Rate</span>
                <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                  comprehensiveStats.userGrowthRate >= 10 ? 'bg-green-100 text-green-800' :
                  comprehensiveStats.userGrowthRate >= 0 ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {comprehensiveStats.userGrowthRate >= 10 ? 'High' :
                   comprehensiveStats.userGrowthRate >= 0 ? 'Moderate' : 'Low'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Quota Efficiency</span>
                <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                  comprehensiveStats.avgQuotaUtilization >= 70 ? 'bg-green-100 text-green-800' :
                  comprehensiveStats.avgQuotaUtilization >= 40 ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {comprehensiveStats.avgQuotaUtilization}%
                </span>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Marketing & Growth Analytics */}
        {marketingStats && (
          <>
            {/* Viral Growth Section */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-xl p-6 shadow-lg mb-8"
            >
              <h3 className="text-xl font-bold text-gray-900 mb-6 flex items-center">
                <TrendingUp className="h-6 w-6 text-green-600 mr-2" />
                Viral Growth & User Acquisition
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-4 border border-green-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-green-900">Viral Coefficient</span>
                    <Zap className="h-4 w-4 text-green-600" />
                  </div>
                  <div className="text-2xl font-bold text-green-700">{marketingStats.viralCoefficient}</div>
                  <div className="text-xs text-green-600">Users per user</div>
                </div>

                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-blue-900">Conversion Rate</span>
                    <Target className="h-4 w-4 text-blue-600" />
                  </div>
                  <div className="text-2xl font-bold text-blue-700">{marketingStats.referralConversionRate}%</div>
                  <div className="text-xs text-blue-600">Referral success</div>
                </div>

                <div className="bg-gradient-to-r from-purple-50 to-violet-50 rounded-lg p-4 border border-purple-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-purple-900">Network Strength</span>
                    <UserCheck className="h-4 w-4 text-purple-600" />
                  </div>
                  <div className="text-2xl font-bold text-purple-700">{marketingStats.networkStrength}</div>
                  <div className="text-xs text-purple-600">Connectivity score</div>
                </div>

                <div className="bg-gradient-to-r from-orange-50 to-amber-50 rounded-lg p-4 border border-orange-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-orange-900">Growth Momentum</span>
                    <TrendingUp className="h-4 w-4 text-orange-600" />
                  </div>
                  <div className="text-2xl font-bold text-orange-700">{marketingStats.userGrowthMomentum}%</div>
                  <div className="text-xs text-orange-600">Week over week</div>
                </div>
              </div>
            </motion.div>

            {/* User Acquisition Breakdown */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8"
            >
              {/* Acquisition Sources */}
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                  <Users className="h-5 w-5 text-blue-600 mr-2" />
                  User Acquisition Sources
                </h4>
                <div className="space-y-4">
                  <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
                    <div>
                      <span className="text-sm font-medium text-blue-900">Organic Users</span>
                      <div className="text-xs text-blue-600">Direct signups</div>
                    </div>
                    <span className="text-lg font-bold text-blue-700">{marketingStats.organicUsers}</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                    <div>
                      <span className="text-sm font-medium text-green-900">Referred Users</span>
                      <div className="text-xs text-green-600">Via referral codes</div>
                    </div>
                    <span className="text-lg font-bold text-green-700">{marketingStats.referredUsers}</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-purple-50 rounded-lg">
                    <div>
                      <span className="text-sm font-medium text-purple-900">Campaign Users</span>
                      <div className="text-xs text-purple-600">Temporary codes</div>
                    </div>
                    <span className="text-lg font-bold text-purple-700">{marketingStats.temporaryCodeUsers}</span>
                  </div>
                </div>
              </div>

              {/* Retention & Engagement */}
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                  <Activity className="h-5 w-5 text-green-600 mr-2" />
                  Retention & Engagement
                </h4>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">7-Day Retention</span>
                    <div className="flex items-center">
                      <div className="w-20 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-green-600 h-2 rounded-full" 
                          style={{ width: `${marketingStats.retentionRate7d}%` }}
                        />
                      </div>
                      <span className="text-sm font-bold text-green-600">{marketingStats.retentionRate7d}%</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">30-Day Retention</span>
                    <div className="flex items-center">
                      <div className="w-20 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full" 
                          style={{ width: `${marketingStats.retentionRate30d}%` }}
                        />
                      </div>
                      <span className="text-sm font-bold text-blue-600">{marketingStats.retentionRate30d}%</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Churn Rate</span>
                    <div className="flex items-center">
                      <div className="w-20 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-red-600 h-2 rounded-full" 
                          style={{ width: `${marketingStats.churnRate}%` }}
                        />
                      </div>
                      <span className="text-sm font-bold text-red-600">{marketingStats.churnRate}%</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center p-2 bg-gray-50 rounded">
                    <span className="text-sm font-medium text-gray-700">Discord Linked</span>
                    <span className="text-sm font-bold text-indigo-600">{marketingStats.discordLinkedUsers}</span>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Top Performers */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8"
            >
              {/* Top Influencers */}
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                  <Trophy className="h-5 w-5 text-yellow-600 mr-2" />
                  Top Influencers
                </h4>
                <div className="space-y-3">
                  {marketingStats.topInfluencers.slice(0, 5).map((influencer, index) => (
                    <div key={influencer.wallet} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${
                          index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-gray-400' : index === 2 ? 'bg-yellow-600' : 'bg-gray-300'
                        }`}>
                          {index + 1}
                        </div>
                        <div className="ml-3">
                          <div className="text-sm font-medium text-gray-900">
                            {influencer.wallet.slice(0, 6)}...{influencer.wallet.slice(-4)}
                          </div>
                          <div className="text-xs text-gray-500">{influencer.networkSize} network</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-bold text-blue-600">{influencer.referralCount}</div>
                        <div className="text-xs text-gray-500">referrals</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Top Performing Campaigns */}
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                  <Gift className="h-5 w-5 text-purple-600 mr-2" />
                  Top Performing Campaigns
                </h4>
                <div className="space-y-3">
                  {marketingStats.topPerformingCodes.length > 0 ? marketingStats.topPerformingCodes.map((code, index) => (
                    <div key={code.code} className="p-3 bg-gray-50 rounded-lg">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{code.name}</div>
                          <div className="text-xs text-gray-500 font-mono">{code.code}</div>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-bold text-purple-600">{code.totalUsers}</div>
                          <div className="text-xs text-gray-500">users</div>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-600">Conversion Rate</span>
                        <div className="flex items-center">
                          <div className="w-16 bg-gray-200 rounded-full h-1.5 mr-2">
                            <div 
                              className="bg-purple-600 h-1.5 rounded-full" 
                              style={{ width: `${Math.min(code.conversionRate, 100)}%` }}
                            />
                          </div>
                          <span className="text-xs font-bold text-purple-600">{code.conversionRate.toFixed(1)}%</span>
                        </div>
                      </div>
                    </div>
                  )) : (
                    <div className="text-center py-8 text-gray-500">
                      <Gift className="h-8 w-8 mx-auto mb-2 text-gray-300" />
                      <p className="text-sm">No campaign data available</p>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </>
        )}
      </>
    );
  };

  const renderTemporaryCodesContent = () => (
    <>
      {/* Actions */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-wrap gap-4 mb-8"
      >
        <button
          onClick={() => setShowCreateForm(true)}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
        >
          <Plus className="h-5 w-5" />
          Create Temporary Code
        </button>

        <button
          onClick={handleCleanupExpired}
          className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
        >
          <Trash2 className="h-5 w-5" />
          Cleanup Expired
        </button>

        <button
          onClick={fetchData}
          className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
        >
          <RefreshCw className="h-5 w-5" />
          Refresh Data
        </button>
      </motion.div>

      {/* Temporary Codes Table */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-lg overflow-hidden"
      >
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-900">Temporary Invite Codes</h2>
          <p className="text-gray-600">Manage and monitor temporary invite codes for influencer campaigns</p>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Code</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usage</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expires</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {temporaryCodes.map((code) => (
                <tr key={code.code} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center gap-2">
                      <span className="font-mono text-sm">{code.code}</span>
                      <button
                        onClick={() => handleCopyCode(code.code)}
                        className="text-gray-400 hover:text-gray-600"
                      >
                        {copiedCode === code.code ? (
                          <Check className="h-4 w-4 text-green-500" />
                        ) : (
                          <Copy className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{code.name}</div>
                      {code.description && (
                        <div className="text-sm text-gray-500">{code.description}</div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {code.currentUses} / {code.maxUses}
                    </div>
                    <div className="w-24 bg-gray-200 rounded-full h-2 mt-1">
                      <div
                        className="bg-blue-600 h-2 rounded-full"
                        style={{ width: `${(code.currentUses / code.maxUses) * 100}%` }}
                      />
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      code.isActive 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {code.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {code.expiresAt ? (
                      <div className="flex items-center gap-1">
                        <Clock className="h-4 w-4" />
                        {new Date(code.expiresAt).toLocaleDateString()}
                      </div>
                    ) : (
                      'Never'
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex gap-2">
                      {code.isActive && (
                        <button
                          onClick={() => handleDeactivateCode(code.code)}
                          className="text-red-600 hover:text-red-800"
                          title="Deactivate"
                        >
                          <PowerOff className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {temporaryCodes.length === 0 && (
          <div className="p-12 text-center">
            <Trophy className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">No temporary codes created yet</p>
          </div>
        )}
      </motion.div>
    </>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col">
      {/* Main content */}
      <div className="flex-grow p-4">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-8"
          >
            <h1 className="text-4xl font-bold text-blue-900 mb-2">Admin Dashboard</h1>
            <p className="text-blue-600">
              {currentView === 'overview' && 'Comprehensive testnet analytics and growth metrics'}
              {currentView === 'temporary-codes' && 'Manage temporary invite codes for influencer campaigns'}
              {currentView === 'users' && 'User management and administration'}
              {currentView === 'settings' && 'System settings and configuration'}
            </p>
          </motion.div>

          {/* Navigation Tabs */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex flex-wrap justify-center gap-2 mb-8"
          >
            {[
              { key: 'overview', label: 'Overview', icon: Home },
              { key: 'temporary-codes', label: 'Temporary Codes', icon: Gift },
              { key: 'users', label: 'Users', icon: Users },
              { key: 'settings', label: 'Settings', icon: Settings },
            ].map(({ key, label, icon: Icon }) => (
              <button
                key={key}
                onClick={() => setCurrentView(key as AdminView)}
                className={`flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-colors ${
                  currentView === key
                    ? 'bg-blue-600 text-white shadow-lg'
                    : 'bg-white text-blue-600 hover:bg-blue-50 border border-blue-200'
                }`}
              >
                <Icon className="h-5 w-5" />
                {label}
              </button>
            ))}
                     </motion.div>

          {/* Content based on current view */}
          {loading ? (
            <div className="flex items-center justify-center py-20">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 text-blue-600 animate-spin mx-auto mb-4" />
                <p className="text-blue-600">Loading {currentView} data...</p>
              </div>
            </div>
          ) : error ? (
            <div className="bg-red-50 border border-red-200 rounded-xl p-6 text-center">
              <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-4" />
              <p className="text-red-600 font-medium">{error}</p>
              <button
                onClick={fetchData}
                className="mt-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                Retry
              </button>
            </div>
          ) : (
            <>
              {currentView === 'overview' && renderOverviewContent()}
              {currentView === 'temporary-codes' && renderTemporaryCodesContent()}
              {currentView === 'users' && (
                <div className="bg-white rounded-xl p-8 shadow-lg text-center">
                  <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-xl font-bold text-gray-700 mb-2">User Management</h3>
                  <p className="text-gray-500">User management features coming soon...</p>
                </div>
              )}
              {currentView === 'settings' && (
                <div className="bg-white rounded-xl p-8 shadow-lg text-center">
                  <Settings className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-xl font-bold text-gray-700 mb-2">System Settings</h3>
                  <p className="text-gray-500">System configuration options coming soon...</p>
                </div>
              )}
            </>
          )}



        {/* Create Code Modal */}
        {showCreateForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="bg-white rounded-xl p-6 w-full max-w-md"
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-bold">Create Temporary Code</h3>
                <button
                  onClick={() => setShowCreateForm(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>

              <form onSubmit={handleCreateCode} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Campaign Name *
                  </label>
                  <input
                    type="text"
                    value={createFormData.name}
                    onChange={(e) => setCreateFormData({ ...createFormData, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g., Crypto Influencer Campaign"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    value={createFormData.description}
                    onChange={(e) => setCreateFormData({ ...createFormData, description: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    rows={2}
                    placeholder="Optional description"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Max Uses *
                  </label>
                  <input
                    type="number"
                    value={createFormData.maxUses}
                    onChange={(e) => setCreateFormData({ ...createFormData, maxUses: parseInt(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    min="1"
                    max="10000"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Custom Code (optional)
                  </label>
                  <input
                    type="text"
                    value={createFormData.customCode}
                    onChange={(e) => setCreateFormData({ ...createFormData, customCode: e.target.value.toUpperCase() })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Leave empty for auto-generation"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Expiration Date (optional)
                  </label>
                  <input
                    type="datetime-local"
                    value={createFormData.expiresAt}
                    onChange={(e) => setCreateFormData({ ...createFormData, expiresAt: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    type="submit"
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition-colors"
                  >
                    Create Code
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowCreateForm(false)}
                    className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-md transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </motion.div>
          </div>
        )}
        </div>
      </div>
      
      {/* Footer */}
      <Footer />
    </div>
  );
};

export default AdminDashboard; 